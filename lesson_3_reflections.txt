1 -----------

How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The results are narrowed down to only the lines in the two different files that have either been added, deleted or modified in some way

2 ---------
How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Having entire file history access can highlight repetitive mistakes that I make while coding.

3 ----------
What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Automatic commits prevent you from correcting you own mistakes when you see them whereas manual commits allow you to not save a mistake before you correct it.

4 ---------
Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    I think this allows for faster project development during the coding process where as Google Docs and other programs that save automatically were not specifically intended for production coding environments.

5 ---------
How can you use the commands git log and git diff to view the history of files?

    git diff highlights differences between two or three files, only whereas git log displays recent changes for all files.

6 ---------
How might using version control make you more confident to make changes that
could break something?

    With version control you have confidence that you can always go back to the last good code version that you saved in case you make a mistake.
    


7 ---------
Now that you have your workspace set up, what do you want to try using Git for?

    I want to try using Git to update a lot of previous course coding projects so that they are better represented in my GitHub repositories.

8 ---------
How can you use the staging area to make sure you have one commit per logical change?

    The staging area lists all the files that have been added for the next commit. By reviewing these files you would be able to determine if they are all part of one logical change or not.

9 ---------
How is the staging area different from the working directory and the repository? What value do you think it offers?

    The staging area is an intermediate area that allows you to review new or modified files prior to making a commit. If files are present that shouldn't be committed yet they can be removed with the git reset file-name command prior to the next commit.

10 ---------
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

    Branches enable the programmer to track and view multiple versions of the same project. Additionally, it facilitates experimentation with out breaking working code that has already been written.

11 ---------
How do the diagrams help you visualize the branch structure?

    Diagrams help you visualize which commits took place on which Branches and in which order in relation to time.


12 ---------
What is the result of merging two branches together?

    Git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch. This is a method for incorporating new features, bug fixes or other changes into the production or master branch when merging into that branch.

13 ---------
Why do we represent it in the diagram the way we do?

    The diagram shows that the separate branches called in the git merge statement are now folded into one single branch.

14 ---------
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

    Automatic merging by git speeds up the coding process however, when a conflict arrises git also automatically requires human input to resolve the conflicts since it can't know what to do in those cases.
    
15 --------- 
When would you want to use a remote repository rather than keeping all your work local?

    I would do this if collborating on a project or product new feature or bug fix with others involving a lot of potentiatl changes before arriving at the final version or solution.
